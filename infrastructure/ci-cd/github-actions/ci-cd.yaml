name: FlowForge CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: flowforge_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm run test
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_NAME: flowforge_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Run integration tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_NAME: flowforge_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  build:
    name: Build and Push Images
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    outputs:
      image-api-gateway: ${{ steps.meta-api.outputs.tags }}
      image-workflow-engine: ${{ steps.meta-engine.outputs.tags }}
      image-node-executor: ${{ steps.meta-executor.outputs.tags }}
      image-webhook-handler: ${{ steps.meta-webhook.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build application
      run: |
        npm ci
        npm run build

    # API Gateway
    - name: Extract metadata for API Gateway
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push API Gateway
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infrastructure/docker/service-images/api-gateway/Dockerfile
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Workflow Engine
    - name: Extract metadata for Workflow Engine
      id: meta-engine
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/workflow-engine
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Workflow Engine
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infrastructure/docker/service-images/workflow-engine/Dockerfile
        push: true
        tags: ${{ steps.meta-engine.outputs.tags }}
        labels: ${{ steps.meta-engine.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Node Executor
    - name: Extract metadata for Node Executor
      id: meta-executor
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/node-executor
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Node Executor
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infrastructure/docker/service-images/node-executor/Dockerfile
        push: true
        tags: ${{ steps.meta-executor.outputs.tags }}
        labels: ${{ steps.meta-executor.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Webhook Handler
    - name: Extract metadata for Webhook Handler
      id: meta-webhook
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/webhook-handler
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Webhook Handler
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infrastructure/docker/service-images/webhook-handler/Dockerfile
        push: true
        tags: ${{ steps.meta-webhook.outputs.tags }}
        labels: ${{ steps.meta-webhook.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Deploy to Kubernetes
      run: |
        # Update image tags in kustomization
        cd infrastructure/kubernetes/overlays/development
        kustomize edit set image \
          flowforge/api-gateway=${{ needs.build.outputs.image-api-gateway }} \
          flowforge/workflow-engine=${{ needs.build.outputs.image-workflow-engine }} \
          flowforge/node-executor=${{ needs.build.outputs.image-node-executor }} \
          flowforge/webhook-handler=${{ needs.build.outputs.image-webhook-handler }}
        
        kubectl apply -k .

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/flowforge-api-gateway -n flowforge-system
        kubectl rollout status deployment/flowforge-workflow-engine -n flowforge-system
        kubectl rollout status deployment/flowforge-node-executor -n flowforge-system
        kubectl rollout status deployment/flowforge-webhook-handler -n flowforge-system

  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Deploy to Kubernetes
      run: |
        cd infrastructure/kubernetes/overlays/staging
        kustomize edit set image \
          flowforge/api-gateway=${{ needs.build.outputs.image-api-gateway }} \
          flowforge/workflow-engine=${{ needs.build.outputs.image-workflow-engine }} \
          flowforge/node-executor=${{ needs.build.outputs.image-node-executor }} \
          flowforge/webhook-handler=${{ needs.build.outputs.image-webhook-handler }}
        
        kubectl apply -k .

    - name: Run smoke tests
      run: |
        # Wait for deployment
        kubectl rollout status deployment/flowforge-api-gateway -n flowforge-system
        
        # Run basic health checks
        kubectl get pods -n flowforge-system
        
        # Test API endpoints
        API_URL=$(kubectl get ingress flowforge-ingress -n flowforge-system -o jsonpath='{.spec.rules[0].host}')
        curl -f https://$API_URL/api/health

  deploy-prod:
    name: Deploy to Production
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Deploy to Kubernetes
      run: |
        cd infrastructure/kubernetes/overlays/production
        kustomize edit set image \
          flowforge/api-gateway=${{ needs.build.outputs.image-api-gateway }} \
          flowforge/workflow-engine=${{ needs.build.outputs.image-workflow-engine }} \
          flowforge/node-executor=${{ needs.build.outputs.image-node-executor }} \
          flowforge/webhook-handler=${{ needs.build.outputs.image-webhook-handler }}
        
        kubectl apply -k .

    - name: Verify production deployment
      run: |
        # Blue-green deployment verification
        kubectl rollout status deployment/flowforge-api-gateway -n flowforge-system
        kubectl rollout status deployment/flowforge-workflow-engine -n flowforge-system
        kubectl rollout status deployment/flowforge-node-executor -n flowforge-system
        kubectl rollout status deployment/flowforge-webhook-handler -n flowforge-system
        
        # Health checks
        kubectl get pods -n flowforge-system
        
        # Notify deployment success
        echo "Production deployment completed successfully!"
