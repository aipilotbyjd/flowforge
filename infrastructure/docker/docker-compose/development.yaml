version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: flowforge-postgres-dev
    environment:
      POSTGRES_DB: flowforge_dev
      POSTGRES_USER: flowforge
      POSTGRES_PASSWORD: flowforge123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - flowforge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flowforge -d flowforge_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: flowforge-redis-dev
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - flowforge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  api-gateway:
    build:
      context: ../../..
      dockerfile: infrastructure/docker/service-images/api-gateway/Dockerfile
      args:
        NODE_ENV: development
    container_name: flowforge-api-gateway-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=flowforge
      - DB_PASSWORD=flowforge123
      - DB_NAME=flowforge_dev
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=dev-secret-key-change-in-production
      - JWT_EXPIRES_IN=24h
      - CORS_ORIGIN=*
      - API_VERSION=v1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - flowforge-network
    restart: unless-stopped
    volumes:
      - ../../../apps/api-gateway:/app/apps/api-gateway
      - ../../../libs:/app/libs
      - ../../../dist:/app/dist
    working_dir: /app

  workflow-engine:
    build:
      context: ../../..
      dockerfile: infrastructure/docker/service-images/workflow-engine/Dockerfile
      args:
        NODE_ENV: development
    container_name: flowforge-workflow-engine-dev
    ports:
      - "3001:3001"
      - "50051:50051"
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=flowforge
      - DB_PASSWORD=flowforge123
      - DB_NAME=flowforge_dev
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - GRPC_PORT=50051
      - MAX_CONCURRENT_EXECUTIONS=10
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - flowforge-network
    restart: unless-stopped
    volumes:
      - ../../../apps/workflow-engine:/app/apps/workflow-engine
      - ../../../libs:/app/libs
      - ../../../dist:/app/dist

  node-executor:
    build:
      context: ../../..
      dockerfile: infrastructure/docker/service-images/node-executor/Dockerfile
      args:
        NODE_ENV: development
    container_name: flowforge-node-executor-dev
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WORKER_CONCURRENCY=5
      - EXECUTION_TIMEOUT=300000
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - flowforge-network
    restart: unless-stopped
    volumes:
      - ../../../apps/node-executor:/app/apps/node-executor
      - ../../../libs:/app/libs
      - ../../../dist:/app/dist

  webhook-handler:
    build:
      context: ../../..
      dockerfile: infrastructure/docker/service-images/webhook-handler/Dockerfile
      args:
        NODE_ENV: development
    container_name: flowforge-webhook-handler-dev
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WEBHOOK_TIMEOUT=30000
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - flowforge-network
    restart: unless-stopped
    volumes:
      - ../../../apps/webhook-handler:/app/apps/webhook-handler
      - ../../../libs:/app/libs
      - ../../../dist:/app/dist

  # Monitoring services
  prometheus:
    image: prom/prometheus:latest
    container_name: flowforge-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ../../monitoring/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
      - ../../monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - flowforge-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: flowforge-grafana-dev
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ../../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - flowforge-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  flowforge-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
